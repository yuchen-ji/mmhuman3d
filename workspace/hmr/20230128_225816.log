2023-01-28 22:58:16,384 - mmhuman3d - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: NVIDIA TITAN RTX
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.0, V11.0.221
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.8.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.0
OpenCV: 4.7.0
MMCV: 1.5.3
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMHuman3d: 0.10.0+
------------------------------------------------------------

2023-01-28 22:58:16,385 - mmhuman3d - INFO - Distributed training: True
2023-01-28 22:58:17,426 - mmhuman3d - INFO - Config:
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
use_adversarial_train = True
evaluation = dict(metric=['pa-mpjpe', 'mpjpe'])
optimizer = dict(
    backbone=dict(type='Adam', lr=0.00025),
    head=dict(type='Adam', lr=0.00025),
    disc=dict(type='Adam', lr=0.0001))
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='Fixed', by_epoch=False)
runner = dict(type='EpochBasedRunner', max_epochs=100)
img_res = 224
model = dict(
    type='ImageBodyModelEstimator',
    backbone=dict(
        type='ResNet',
        depth=50,
        out_indices=[3],
        norm_eval=False,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    head=dict(
        type='HMRHead',
        feat_dim=2048,
        smpl_mean_params='data/body_models/smpl_mean_params.npz'),
    body_model_train=dict(
        type='SMPL',
        keypoint_src='smpl_54',
        keypoint_dst='smpl_54',
        model_path='data/body_models/smpl',
        keypoint_approximate=True,
        extra_joints_regressor='data/body_models/J_regressor_extra.npy'),
    body_model_test=dict(
        type='SMPL',
        keypoint_src='h36m',
        keypoint_dst='h36m',
        model_path='data/body_models/smpl',
        joints_regressor='data/body_models/J_regressor_h36m.npy'),
    convention='smpl_54',
    loss_keypoints3d=dict(type='SmoothL1Loss', loss_weight=100),
    loss_keypoints2d=dict(type='SmoothL1Loss', loss_weight=10),
    loss_vertex=dict(type='L1Loss', loss_weight=2),
    loss_smpl_pose=dict(type='MSELoss', loss_weight=3),
    loss_smpl_betas=dict(type='MSELoss', loss_weight=0.02),
    loss_adv=dict(
        type='GANLoss',
        gan_type='lsgan',
        real_label_val=1.0,
        fake_label_val=0.0,
        loss_weight=1),
    disc=dict(type='SMPLDiscriminator'))
dataset_type = 'HumanImageDataset'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
data_keys = [
    'has_smpl', 'smpl_body_pose', 'smpl_global_orient', 'smpl_betas',
    'smpl_transl', 'keypoints2d', 'keypoints3d', 'sample_idx'
]
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomChannelNoise', noise_factor=0.4),
    dict(type='RandomHorizontalFlip', flip_prob=0.5, convention='smpl_54'),
    dict(type='GetRandomScaleRotation', rot_factor=30, scale_factor=0.25),
    dict(type='MeshAffine', img_res=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(
        type='ToTensor',
        keys=[
            'has_smpl', 'smpl_body_pose', 'smpl_global_orient', 'smpl_betas',
            'smpl_transl', 'keypoints2d', 'keypoints3d', 'sample_idx'
        ]),
    dict(
        type='Collect',
        keys=[
            'img', 'has_smpl', 'smpl_body_pose', 'smpl_global_orient',
            'smpl_betas', 'smpl_transl', 'keypoints2d', 'keypoints3d',
            'sample_idx'
        ],
        meta_keys=['image_path', 'center', 'scale', 'rotation'])
]
adv_data_keys = [
    'smpl_body_pose', 'smpl_global_orient', 'smpl_betas', 'smpl_transl'
]
train_adv_pipeline = [
    dict(
        type='Collect',
        keys=[
            'smpl_body_pose', 'smpl_global_orient', 'smpl_betas', 'smpl_transl'
        ],
        meta_keys=[])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='GetRandomScaleRotation', rot_factor=0, scale_factor=0),
    dict(type='MeshAffine', img_res=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(
        type='ToTensor',
        keys=[
            'has_smpl', 'smpl_body_pose', 'smpl_global_orient', 'smpl_betas',
            'smpl_transl', 'keypoints2d', 'keypoints3d', 'sample_idx'
        ]),
    dict(
        type='Collect',
        keys=[
            'img', 'has_smpl', 'smpl_body_pose', 'smpl_global_orient',
            'smpl_betas', 'smpl_transl', 'keypoints2d', 'keypoints3d',
            'sample_idx'
        ],
        meta_keys=['image_path', 'center', 'scale', 'rotation'])
]
inference_pipeline = [
    dict(type='MeshAffine', img_res=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(
        type='Collect',
        keys=['img', 'sample_idx'],
        meta_keys=['image_path', 'center', 'scale', 'rotation'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=1,
    train=dict(
        type='AdversarialDataset',
        train_dataset=dict(
            type='MixedDataset',
            configs=[
                dict(
                    type='HumanImageDataset',
                    dataset_name='h36m',
                    data_prefix='data',
                    pipeline=[
                        dict(type='LoadImageFromFile'),
                        dict(type='RandomChannelNoise', noise_factor=0.4),
                        dict(
                            type='RandomHorizontalFlip',
                            flip_prob=0.5,
                            convention='smpl_54'),
                        dict(
                            type='GetRandomScaleRotation',
                            rot_factor=30,
                            scale_factor=0.25),
                        dict(type='MeshAffine', img_res=224),
                        dict(
                            type='Normalize',
                            mean=[123.675, 116.28, 103.53],
                            std=[58.395, 57.12, 57.375],
                            to_rgb=True),
                        dict(type='ImageToTensor', keys=['img']),
                        dict(
                            type='ToTensor',
                            keys=[
                                'has_smpl', 'smpl_body_pose',
                                'smpl_global_orient', 'smpl_betas',
                                'smpl_transl', 'keypoints2d', 'keypoints3d',
                                'sample_idx'
                            ]),
                        dict(
                            type='Collect',
                            keys=[
                                'img', 'has_smpl', 'smpl_body_pose',
                                'smpl_global_orient', 'smpl_betas',
                                'smpl_transl', 'keypoints2d', 'keypoints3d',
                                'sample_idx'
                            ],
                            meta_keys=[
                                'image_path', 'center', 'scale', 'rotation'
                            ])
                    ],
                    convention='smpl_54',
                    ann_file='h36m_train.npz'),
                dict(
                    type='HumanImageDataset',
                    dataset_name='lsp',
                    data_prefix='data',
                    pipeline=[
                        dict(type='LoadImageFromFile'),
                        dict(type='RandomChannelNoise', noise_factor=0.4),
                        dict(
                            type='RandomHorizontalFlip',
                            flip_prob=0.5,
                            convention='smpl_54'),
                        dict(
                            type='GetRandomScaleRotation',
                            rot_factor=30,
                            scale_factor=0.25),
                        dict(type='MeshAffine', img_res=224),
                        dict(
                            type='Normalize',
                            mean=[123.675, 116.28, 103.53],
                            std=[58.395, 57.12, 57.375],
                            to_rgb=True),
                        dict(type='ImageToTensor', keys=['img']),
                        dict(
                            type='ToTensor',
                            keys=[
                                'has_smpl', 'smpl_body_pose',
                                'smpl_global_orient', 'smpl_betas',
                                'smpl_transl', 'keypoints2d', 'keypoints3d',
                                'sample_idx'
                            ]),
                        dict(
                            type='Collect',
                            keys=[
                                'img', 'has_smpl', 'smpl_body_pose',
                                'smpl_global_orient', 'smpl_betas',
                                'smpl_transl', 'keypoints2d', 'keypoints3d',
                                'sample_idx'
                            ],
                            meta_keys=[
                                'image_path', 'center', 'scale', 'rotation'
                            ])
                    ],
                    convention='smpl_54',
                    ann_file='lsp_train.npz'),
                dict(
                    type='HumanImageDataset',
                    dataset_name='lspet',
                    data_prefix='data',
                    pipeline=[
                        dict(type='LoadImageFromFile'),
                        dict(type='RandomChannelNoise', noise_factor=0.4),
                        dict(
                            type='RandomHorizontalFlip',
                            flip_prob=0.5,
                            convention='smpl_54'),
                        dict(
                            type='GetRandomScaleRotation',
                            rot_factor=30,
                            scale_factor=0.25),
                        dict(type='MeshAffine', img_res=224),
                        dict(
                            type='Normalize',
                            mean=[123.675, 116.28, 103.53],
                            std=[58.395, 57.12, 57.375],
                            to_rgb=True),
                        dict(type='ImageToTensor', keys=['img']),
                        dict(
                            type='ToTensor',
                            keys=[
                                'has_smpl', 'smpl_body_pose',
                                'smpl_global_orient', 'smpl_betas',
                                'smpl_transl', 'keypoints2d', 'keypoints3d',
                                'sample_idx'
                            ]),
                        dict(
                            type='Collect',
                            keys=[
                                'img', 'has_smpl', 'smpl_body_pose',
                                'smpl_global_orient', 'smpl_betas',
                                'smpl_transl', 'keypoints2d', 'keypoints3d',
                                'sample_idx'
                            ],
                            meta_keys=[
                                'image_path', 'center', 'scale', 'rotation'
                            ])
                    ],
                    convention='smpl_54',
                    ann_file='lspet_train.npz'),
                dict(
                    type='HumanImageDataset',
                    dataset_name='mpii',
                    data_prefix='data',
                    pipeline=[
                        dict(type='LoadImageFromFile'),
                        dict(type='RandomChannelNoise', noise_factor=0.4),
                        dict(
                            type='RandomHorizontalFlip',
                            flip_prob=0.5,
                            convention='smpl_54'),
                        dict(
                            type='GetRandomScaleRotation',
                            rot_factor=30,
                            scale_factor=0.25),
                        dict(type='MeshAffine', img_res=224),
                        dict(
                            type='Normalize',
                            mean=[123.675, 116.28, 103.53],
                            std=[58.395, 57.12, 57.375],
                            to_rgb=True),
                        dict(type='ImageToTensor', keys=['img']),
                        dict(
                            type='ToTensor',
                            keys=[
                                'has_smpl', 'smpl_body_pose',
                                'smpl_global_orient', 'smpl_betas',
                                'smpl_transl', 'keypoints2d', 'keypoints3d',
                                'sample_idx'
                            ]),
                        dict(
                            type='Collect',
                            keys=[
                                'img', 'has_smpl', 'smpl_body_pose',
                                'smpl_global_orient', 'smpl_betas',
                                'smpl_transl', 'keypoints2d', 'keypoints3d',
                                'sample_idx'
                            ],
                            meta_keys=[
                                'image_path', 'center', 'scale', 'rotation'
                            ])
                    ],
                    convention='smpl_54',
                    ann_file='mpii_train.npz'),
                dict(
                    type='HumanImageDataset',
                    dataset_name='coco',
                    data_prefix='data',
                    pipeline=[
                        dict(type='LoadImageFromFile'),
                        dict(type='RandomChannelNoise', noise_factor=0.4),
                        dict(
                            type='RandomHorizontalFlip',
                            flip_prob=0.5,
                            convention='smpl_54'),
                        dict(
                            type='GetRandomScaleRotation',
                            rot_factor=30,
                            scale_factor=0.25),
                        dict(type='MeshAffine', img_res=224),
                        dict(
                            type='Normalize',
                            mean=[123.675, 116.28, 103.53],
                            std=[58.395, 57.12, 57.375],
                            to_rgb=True),
                        dict(type='ImageToTensor', keys=['img']),
                        dict(
                            type='ToTensor',
                            keys=[
                                'has_smpl', 'smpl_body_pose',
                                'smpl_global_orient', 'smpl_betas',
                                'smpl_transl', 'keypoints2d', 'keypoints3d',
                                'sample_idx'
                            ]),
                        dict(
                            type='Collect',
                            keys=[
                                'img', 'has_smpl', 'smpl_body_pose',
                                'smpl_global_orient', 'smpl_betas',
                                'smpl_transl', 'keypoints2d', 'keypoints3d',
                                'sample_idx'
                            ],
                            meta_keys=[
                                'image_path', 'center', 'scale', 'rotation'
                            ])
                    ],
                    convention='smpl_54',
                    ann_file='coco_2014_train.npz')
            ],
            partition=[0.35, 0.15, 0.1, 0.1, 0.1, 0.2]),
        adv_dataset=dict(
            type='MeshDataset',
            dataset_name='cmu_mosh',
            data_prefix='data',
            pipeline=[
                dict(
                    type='Collect',
                    keys=[
                        'smpl_body_pose', 'smpl_global_orient', 'smpl_betas',
                        'smpl_transl'
                    ],
                    meta_keys=[])
            ],
            ann_file='cmu_mosh.npz')),
    test=dict(
        type='HumanImageDataset',
        body_model=dict(
            type='GenderedSMPL',
            keypoint_src='h36m',
            keypoint_dst='h36m',
            model_path='data/body_models/smpl',
            joints_regressor='data/body_models/J_regressor_h36m.npy'),
        dataset_name='pw3d',
        data_prefix='data',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='GetRandomScaleRotation', rot_factor=0, scale_factor=0),
            dict(type='MeshAffine', img_res=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(
                type='ToTensor',
                keys=[
                    'has_smpl', 'smpl_body_pose', 'smpl_global_orient',
                    'smpl_betas', 'smpl_transl', 'keypoints2d', 'keypoints3d',
                    'sample_idx'
                ]),
            dict(
                type='Collect',
                keys=[
                    'img', 'has_smpl', 'smpl_body_pose', 'smpl_global_orient',
                    'smpl_betas', 'smpl_transl', 'keypoints2d', 'keypoints3d',
                    'sample_idx'
                ],
                meta_keys=['image_path', 'center', 'scale', 'rotation'])
        ],
        ann_file='pw3d_test.npz'))
work_dir = 'workspace/hmr/'
gpu_ids = range(0, 8)

2023-01-28 22:58:18,113 - mmhuman3d - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

head.fc1.weight - torch.Size([1024, 2205]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

head.fc1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

head.fc2.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

head.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

head.decpose.weight - torch.Size([144, 1024]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

head.decpose.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

head.decshape.weight - torch.Size([10, 1024]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

head.decshape.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

head.deccam.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

head.deccam.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.conv_blocks.conv_0.weight - torch.Size([32, 9, 1, 1]): 
Initialized by user-defined `init_weights` in SMPLDiscriminator  

disc.pose_discriminator.conv_blocks.conv_0.bias - torch.Size([32]): 
Initialized by user-defined `init_weights` in SMPLDiscriminator  

disc.pose_discriminator.conv_blocks.conv_1.weight - torch.Size([32, 32, 1, 1]): 
Initialized by user-defined `init_weights` in SMPLDiscriminator  

disc.pose_discriminator.conv_blocks.conv_1.bias - torch.Size([32]): 
Initialized by user-defined `init_weights` in SMPLDiscriminator  

disc.pose_discriminator.fc_layer.0.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.1.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.2.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.2.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.3.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.3.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.4.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.4.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.5.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.5.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.6.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.6.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.7.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.7.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.8.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.8.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.9.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.9.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.10.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.10.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.11.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.11.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.12.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.12.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.13.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.13.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.14.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.14.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.15.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.15.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.16.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.16.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.17.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.17.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.18.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.18.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.19.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.19.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.20.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.20.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.21.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.21.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.22.weight - torch.Size([1, 32]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.pose_discriminator.fc_layer.22.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.full_pose_discriminator.fc_blocks.regressor_fc_0.weight - torch.Size([1024, 736]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.full_pose_discriminator.fc_blocks.regressor_fc_0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.full_pose_discriminator.fc_blocks.regressor_fc_1.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.full_pose_discriminator.fc_blocks.regressor_fc_1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.full_pose_discriminator.fc_blocks.regressor_fc_2.weight - torch.Size([1, 1024]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.full_pose_discriminator.fc_blocks.regressor_fc_2.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.shape_discriminator.fc_blocks.regressor_fc_0.weight - torch.Size([5, 10]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.shape_discriminator.fc_blocks.regressor_fc_0.bias - torch.Size([5]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.shape_discriminator.fc_blocks.regressor_fc_1.weight - torch.Size([1, 5]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

disc.shape_discriminator.fc_blocks.regressor_fc_1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

body_model_train.betas - torch.Size([1, 10]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

body_model_train.global_orient - torch.Size([1, 3]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

body_model_train.body_pose - torch.Size([1, 69]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

body_model_train.transl - torch.Size([1, 3]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

body_model_test.betas - torch.Size([1, 10]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

body_model_test.global_orient - torch.Size([1, 3]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

body_model_test.body_pose - torch.Size([1, 69]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  

body_model_test.transl - torch.Size([1, 3]): 
The value is the same before and after calling `init_weights` of ImageBodyModelEstimator  
2023-01-28 22:58:39,193 - mmhuman3d - INFO - Start running, host: root@518b9ea961fb, work_dir: /workspaces/mmhuman3d/workspace/hmr
2023-01-28 22:58:39,193 - mmhuman3d - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) FixedLrUpdaterHook                 
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) FixedLrUpdaterHook                 
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) FixedLrUpdaterHook                 
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-01-28 22:58:39,193 - mmhuman3d - INFO - workflow: [('train', 1)], max: 100 epochs
2023-01-28 22:58:39,193 - mmhuman3d - INFO - Checkpoints will be saved to /workspaces/mmhuman3d/workspace/hmr by HardDiskBackend.
2023-01-28 23:16:43,212 - mmhuman3d - INFO - Epoch [1][50/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 30 days, 14:24:49, time: 21.680, data_time: 12.056, memory: 3320, keypoints3d_loss: 1.3369, keypoints2d_loss: 0.4145, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.9482, loss: 2.6996
2023-01-28 23:35:23,401 - mmhuman3d - INFO - Epoch [1][100/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 2:22:04, time: 22.404, data_time: 21.901, memory: 3320, keypoints3d_loss: 0.7774, keypoints2d_loss: 0.2963, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.8558, loss: 1.9294
2023-01-28 23:53:23,691 - mmhuman3d - INFO - Epoch [1][150/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 30 days, 21:08:20, time: 21.606, data_time: 17.059, memory: 3320, keypoints3d_loss: 0.6636, keypoints2d_loss: 0.2657, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.6854, loss: 1.6147
2023-01-29 00:12:09,714 - mmhuman3d - INFO - Epoch [1][200/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 2:06:40, time: 22.520, data_time: 4.087, memory: 3320, keypoints3d_loss: 0.6335, keypoints2d_loss: 0.2693, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.4364, loss: 1.3391
2023-01-29 00:31:38,575 - mmhuman3d - INFO - Epoch [1][250/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 10:45:48, time: 23.377, data_time: 0.018, memory: 3320, keypoints3d_loss: 0.5357, keypoints2d_loss: 0.2518, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.3187, loss: 1.1062
2023-01-29 00:50:47,603 - mmhuman3d - INFO - Epoch [1][300/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 14:11:29, time: 22.981, data_time: 0.199, memory: 3320, keypoints3d_loss: 0.4563, keypoints2d_loss: 0.2348, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2850, loss: 0.9761
2023-01-29 01:08:47,957 - mmhuman3d - INFO - Epoch [1][350/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 9:54:59, time: 21.607, data_time: 2.598, memory: 3320, keypoints3d_loss: 0.4267, keypoints2d_loss: 0.2281, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2720, loss: 0.9269
2023-01-29 01:28:01,488 - mmhuman3d - INFO - Epoch [1][400/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 12:48:55, time: 23.071, data_time: 13.380, memory: 3320, keypoints3d_loss: 0.3871, keypoints2d_loss: 0.2084, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2663, loss: 0.8618
2023-01-29 01:47:28,328 - mmhuman3d - INFO - Epoch [1][450/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 15:59:49, time: 23.337, data_time: 11.992, memory: 3320, keypoints3d_loss: 0.4107, keypoints2d_loss: 0.2180, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2645, loss: 0.8932
2023-01-29 02:07:15,204 - mmhuman3d - INFO - Epoch [1][500/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 19:49:45, time: 23.737, data_time: 0.846, memory: 3320, keypoints3d_loss: 0.3721, keypoints2d_loss: 0.2080, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2620, loss: 0.8421
2023-01-29 02:26:00,398 - mmhuman3d - INFO - Epoch [1][550/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 19:07:21, time: 22.504, data_time: 5.584, memory: 3320, keypoints3d_loss: 0.3599, keypoints2d_loss: 0.2032, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2592, loss: 0.8222
2023-01-29 02:45:15,923 - mmhuman3d - INFO - Epoch [1][600/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 20:11:07, time: 23.110, data_time: 12.023, memory: 3320, keypoints3d_loss: 0.3433, keypoints2d_loss: 0.1924, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2560, loss: 0.7916
2023-01-29 03:05:19,063 - mmhuman3d - INFO - Epoch [1][650/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 23:30:19, time: 24.063, data_time: 0.023, memory: 3320, keypoints3d_loss: 0.3307, keypoints2d_loss: 0.1905, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2557, loss: 0.7769
2023-01-29 03:24:14,823 - mmhuman3d - INFO - Epoch [1][700/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 23:03:34, time: 22.715, data_time: 0.445, memory: 3320, keypoints3d_loss: 0.3088, keypoints2d_loss: 0.1774, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2549, loss: 0.7411
2023-01-29 03:43:08,502 - mmhuman3d - INFO - Epoch [1][750/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 22:32:16, time: 22.674, data_time: 5.187, memory: 3320, keypoints3d_loss: 0.3007, keypoints2d_loss: 0.1703, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2550, loss: 0.7259
2023-01-29 04:03:09,990 - mmhuman3d - INFO - Epoch [1][800/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 32 days, 0:53:42, time: 24.030, data_time: 0.020, memory: 3320, keypoints3d_loss: 0.3040, keypoints2d_loss: 0.1790, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2548, loss: 0.7378
2023-01-29 04:21:14,014 - mmhuman3d - INFO - Epoch [1][850/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 22:17:08, time: 21.680, data_time: 8.195, memory: 3320, keypoints3d_loss: 0.2976, keypoints2d_loss: 0.1709, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2544, loss: 0.7229
2023-01-29 04:39:12,807 - mmhuman3d - INFO - Epoch [1][900/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 19:44:14, time: 21.576, data_time: 7.320, memory: 3320, keypoints3d_loss: 0.2920, keypoints2d_loss: 0.1719, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2545, loss: 0.7184
2023-01-29 05:00:57,428 - mmhuman3d - INFO - Epoch [1][950/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 32 days, 1:25:06, time: 26.092, data_time: 0.140, memory: 3320, keypoints3d_loss: 0.2913, keypoints2d_loss: 0.1673, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2545, loss: 0.7130
2023-01-29 05:20:09,805 - mmhuman3d - INFO - Epoch [1][1000/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 32 days, 1:22:42, time: 23.048, data_time: 16.005, memory: 3320, keypoints3d_loss: 0.2684, keypoints2d_loss: 0.1614, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2548, loss: 0.6846
2023-01-29 05:39:44,370 - mmhuman3d - INFO - Epoch [1][1050/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 32 days, 2:01:17, time: 23.491, data_time: 11.596, memory: 3320, keypoints3d_loss: 0.2889, keypoints2d_loss: 0.1668, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2546, loss: 0.7103
2023-01-29 05:58:54,008 - mmhuman3d - INFO - Epoch [1][1100/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 32 days, 1:48:55, time: 22.993, data_time: 14.033, memory: 3320, keypoints3d_loss: 0.2674, keypoints2d_loss: 0.1563, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2545, loss: 0.6782
2023-01-29 06:17:56,218 - mmhuman3d - INFO - Epoch [1][1150/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 32 days, 1:22:58, time: 22.844, data_time: 14.756, memory: 3320, keypoints3d_loss: 0.2748, keypoints2d_loss: 0.1690, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2551, loss: 0.6990
2023-01-29 06:36:44,461 - mmhuman3d - INFO - Epoch [1][1200/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 32 days, 0:34:07, time: 22.565, data_time: 16.462, memory: 3320, keypoints3d_loss: 0.2854, keypoints2d_loss: 0.1632, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2557, loss: 0.7044
2023-01-29 06:44:14,337 - mmhuman3d - INFO - Saving checkpoint at 1 epochs
2023-01-29 07:02:33,469 - mmhuman3d - INFO - Epoch [2][50/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 10:46:31, time: 21.957, data_time: 3.019, memory: 3320, keypoints3d_loss: 0.2796, keypoints2d_loss: 0.1661, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2560, loss: 0.7017
2023-01-29 07:21:25,446 - mmhuman3d - INFO - Epoch [2][100/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 10:37:55, time: 22.640, data_time: 0.025, memory: 3320, keypoints3d_loss: 0.2807, keypoints2d_loss: 0.1640, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2566, loss: 0.7013
2023-01-29 07:39:51,738 - mmhuman3d - INFO - Epoch [2][150/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 9:50:52, time: 22.126, data_time: 0.021, memory: 3320, keypoints3d_loss: 0.2530, keypoints2d_loss: 0.1554, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2570, loss: 0.6655
2023-01-29 07:58:58,352 - mmhuman3d - INFO - Epoch [2][200/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 10:02:54, time: 22.932, data_time: 2.879, memory: 3320, keypoints3d_loss: 0.2470, keypoints2d_loss: 0.1533, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2571, loss: 0.6574
2023-01-29 08:18:14,891 - mmhuman3d - INFO - Epoch [2][250/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 10:26:22, time: 23.131, data_time: 21.036, memory: 3320, keypoints3d_loss: 0.2489, keypoints2d_loss: 0.1519, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2571, loss: 0.6579
2023-01-29 08:38:04,684 - mmhuman3d - INFO - Epoch [2][300/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 11:30:58, time: 23.796, data_time: 23.462, memory: 3320, keypoints3d_loss: 0.2422, keypoints2d_loss: 0.1512, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2577, loss: 0.6511
2023-01-29 08:57:21,433 - mmhuman3d - INFO - Epoch [2][350/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 11:47:56, time: 23.135, data_time: 11.595, memory: 3320, keypoints3d_loss: 0.2354, keypoints2d_loss: 0.1423, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2586, loss: 0.6362
2023-01-29 09:16:23,266 - mmhuman3d - INFO - Epoch [2][400/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 11:44:12, time: 22.837, data_time: 8.946, memory: 3320, keypoints3d_loss: 0.2440, keypoints2d_loss: 0.1518, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2588, loss: 0.6546
2023-01-29 09:35:05,629 - mmhuman3d - INFO - Epoch [2][450/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 11:16:09, time: 22.447, data_time: 0.025, memory: 3320, keypoints3d_loss: 0.2311, keypoints2d_loss: 0.1429, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2584, loss: 0.6323
2023-01-29 09:53:48,866 - mmhuman3d - INFO - Epoch [2][500/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 10:49:41, time: 22.465, data_time: 10.306, memory: 3320, keypoints3d_loss: 0.2196, keypoints2d_loss: 0.1373, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2592, loss: 0.6161
2023-01-29 10:13:02,709 - mmhuman3d - INFO - Epoch [2][550/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 10:58:17, time: 23.077, data_time: 14.019, memory: 3320, keypoints3d_loss: 0.2222, keypoints2d_loss: 0.1451, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2587, loss: 0.6260
2023-01-29 10:31:44,476 - mmhuman3d - INFO - Epoch [2][600/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 10:30:04, time: 22.436, data_time: 12.199, memory: 3320, keypoints3d_loss: 0.2290, keypoints2d_loss: 0.1497, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2592, loss: 0.6379
2023-01-29 10:50:13,736 - mmhuman3d - INFO - Epoch [2][650/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 9:48:58, time: 22.185, data_time: 8.488, memory: 3320, keypoints3d_loss: 0.2247, keypoints2d_loss: 0.1459, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2593, loss: 0.6299
2023-01-29 11:08:46,780 - mmhuman3d - INFO - Epoch [2][700/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 9:12:59, time: 22.261, data_time: 21.673, memory: 3320, keypoints3d_loss: 0.2248, keypoints2d_loss: 0.1475, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2588, loss: 0.6312
2023-01-29 11:27:19,984 - mmhuman3d - INFO - Epoch [2][750/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 8:38:04, time: 22.264, data_time: 3.548, memory: 3320, keypoints3d_loss: 0.2110, keypoints2d_loss: 0.1343, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2585, loss: 0.6038
2023-01-29 11:46:02,241 - mmhuman3d - INFO - Epoch [2][800/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 8:12:54, time: 22.445, data_time: 0.082, memory: 3320, keypoints3d_loss: 0.2039, keypoints2d_loss: 0.1357, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2589, loss: 0.5985
2023-01-29 12:05:50,368 - mmhuman3d - INFO - Epoch [2][850/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 8:51:39, time: 23.763, data_time: 3.856, memory: 3320, keypoints3d_loss: 0.2047, keypoints2d_loss: 0.1371, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2588, loss: 0.6006
2023-01-29 12:25:31,126 - mmhuman3d - INFO - Epoch [2][900/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 9:20:42, time: 23.615, data_time: 17.061, memory: 3320, keypoints3d_loss: 0.2977, keypoints2d_loss: 0.1717, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2600, loss: 0.7294
2023-01-29 12:44:55,443 - mmhuman3d - INFO - Epoch [2][950/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 9:32:23, time: 23.286, data_time: 22.834, memory: 3320, keypoints3d_loss: 0.2843, keypoints2d_loss: 0.1772, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2608, loss: 0.7223
2023-01-29 13:04:28,952 - mmhuman3d - INFO - Epoch [2][1000/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 9:50:55, time: 23.470, data_time: 23.139, memory: 3320, keypoints3d_loss: 0.2941, keypoints2d_loss: 0.1949, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2623, loss: 0.7513
2023-01-29 13:23:22,821 - mmhuman3d - INFO - Epoch [2][1050/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 9:32:56, time: 22.677, data_time: 10.107, memory: 3320, keypoints3d_loss: 0.2303, keypoints2d_loss: 0.1562, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2615, loss: 0.6480
2023-01-29 13:42:33,662 - mmhuman3d - INFO - Epoch [2][1100/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 9:29:30, time: 23.017, data_time: 0.299, memory: 3320, keypoints3d_loss: 0.2183, keypoints2d_loss: 0.1439, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2630, loss: 0.6252
2023-01-29 14:01:41,962 - mmhuman3d - INFO - Epoch [2][1150/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 9:23:16, time: 22.966, data_time: 0.304, memory: 3320, keypoints3d_loss: 0.2069, keypoints2d_loss: 0.1441, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2636, loss: 0.6146
2023-01-29 14:20:38,911 - mmhuman3d - INFO - Epoch [2][1200/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 9:07:09, time: 22.739, data_time: 12.838, memory: 3320, keypoints3d_loss: 0.2109, keypoints2d_loss: 0.1442, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2659, loss: 0.6210
2023-01-29 14:28:12,279 - mmhuman3d - INFO - Saving checkpoint at 2 epochs
2023-01-29 14:47:41,198 - mmhuman3d - INFO - Epoch [3][50/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 3:05:15, time: 23.355, data_time: 3.937, memory: 3320, keypoints3d_loss: 0.2030, keypoints2d_loss: 0.1334, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2682, loss: 0.6046
2023-01-29 15:07:05,374 - mmhuman3d - INFO - Epoch [3][100/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 3:17:02, time: 23.284, data_time: 0.031, memory: 3320, keypoints3d_loss: 0.2208, keypoints2d_loss: 0.1393, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2696, loss: 0.6297
2023-01-29 15:26:19,570 - mmhuman3d - INFO - Epoch [3][150/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 3:19:56, time: 23.084, data_time: 0.019, memory: 3320, keypoints3d_loss: 0.2379, keypoints2d_loss: 0.1544, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2720, loss: 0.6642
2023-01-29 15:45:33,861 - mmhuman3d - INFO - Epoch [3][200/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 3:22:04, time: 23.086, data_time: 0.119, memory: 3320, keypoints3d_loss: 0.2358, keypoints2d_loss: 0.1470, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2747, loss: 0.6574
2023-01-29 16:04:59,873 - mmhuman3d - INFO - Epoch [3][250/1220]	lr_backbone: 2.500e-04 lr_head: 2.500e-04 lr_disc: 1.000e-04, eta: 31 days, 3:32:05, time: 23.320, data_time: 1.180, memory: 3320, keypoints3d_loss: 0.2501, keypoints2d_loss: 0.1705, vertex_loss: 0.0000, smpl_pose_loss: 0.0000, smpl_betas_loss: 0.0000, adv_loss: 0.2774, loss: 0.6979
